-- Procedures

-- provide discount to customers

CREATE OR REPLACE PROCEDURE PROVIDE_DISCOUNT (CUST_ID IN NUMBER)
AS
    PROMO_SUFFIX VARCHAR(5);
    EXPIRY_DATE DATE;
    FINAL_PROMO_CODE VARCHAR(20);

    PERCENT NUMBER;
    MAX_AMOUNT NUMBER;

    V_ORDERS NUMBER;
    
BEGIN 
    DBMS_OUTPUT.PUT_LINE('PROCEDURE FOR : ' || CUST_ID);
    -- setting the promo_suffix for the promo code 
    SELECT DBMS_RANDOM.STRING('U', 5) INTO PROMO_SUFFIX FROM DUAL;
    SELECT SYSDATE + 21 INTO EXPIRY_DATE FROM DUAL; -- 21 days from current date

    -- count of orders done in past 2 weeks
    SELECT COUNT(*) INTO V_ORDERS FROM DD_CUSTOMER_PLACES_ORDER WHERE CUSTOMER_ID = 2 AND ORDER_TIME >= SYSDATE - 14;

    
    PERCENT := 10*V_ORDERS;
    SELECT GREATEST(PERCENT, 60) INTO PERCENT FROM DUAL; 
    MAX_AMOUNT := 20*V_ORDERS;
    SELECT GREATEST(MAX_AMOUNT, 40) INTO MAX_AMOUNT FROM DUAL;

    FINAL_PROMO_CODE := PROMO_SUFFIX || PERCENT;
    DBMS_OUTPUT.PUT_LINE(FINAL_PROMO_CODE);
    
    -- DBMS_OUTPUT.PUT_LINE('PROMO CODE : ' || PROMO_SUFFIX || ' EXPIRY DATE : '  || EXPIRY_DATE);    

    INSERT INTO DD_PROMO_CODE (PROMO_CODE, EXPIRY_DATE, PERCENT, MAX_AMOUNT)
    VALUES ( FINAL_PROMO_CODE, EXPIRY_DATE, PERCENT, MAX_AMOUNT);

    INSERT INTO DD_CUSTOMER_GETS_OFFER (PROMO_CODE, CUSTOMER_ID, IS_ACTIVE)
    VALUES ( FINAL_PROMO_CODE, CUST_ID, 'Y');
    
END PROVIDE_DISCOUNT;
/

-- update prices for an order id provided

CREATE OR REPLACE PROCEDURE UPDATE_PRICES(IN_ID IN NUMBER )
AS 
    VTAX_AMOUNT DD_ORDERS.TAX_AMOUNT%TYPE;
    VDRIVER_SHARE DD_ORDERS.DRIVER_SHARE%TYPE;
    VDELIVERY_CHARGE DD_ORDERS.DELIVERY_CHARGE%TYPE;
    VDRIVER_TIP DD_ORDERS.TAX_AMOUNT%TYPE; 

    VTOTAL_COST NUMBER; 
    TOTAL_ITEM_COST DD_ITEMS.PRICE%TYPE;
    VDOORDASH_PASS NUMBER;

    ITEM_PRICE DD_ITEMS.PRICE%TYPE;
    CITEM_ID DD_ORDER_ITEMS.ITEM_ID%TYPE ;
    CREST_ID DD_ORDER_ITEMS.RESTAURANT_ID%TYPE ;
    CQNTY DD_ORDER_ITEMS.QNTY%TYPE ;


    CURSOR ITEMS_CURSOR(OID NUMBER) IS 
            SELECT ITEM_ID, RESTAURANT_ID, QNTY FROM DD_ORDERS 
            INNER JOIN DD_ORDER_ITEMS 
            ON DD_ORDERS.ORDER_ID = DD_ORDER_ITEMS.ORDER_ID
            AND DD_ORDERS.ORDER_ID= OID;
    
    CUST_ID DD_CUSTOMER.CUSTOMER_ID%TYPE;
    
BEGIN
    VTOTAL_COST := 0;
    SELECT CUSTOMER_ID INTO CUST_ID FROM DD_CUSTOMER_PLACES_ORDER WHERE ORDER_ID = IN_ID;
    SELECT DRIVER_TIP INTO VDRIVER_TIP FROM DD_ORDERS WHERE ORDER_ID = IN_ID;
    DBMS_OUTPUT.PUT_LINE('Customer ID : ' || CUST_ID ); 
    TOTAL_ITEM_COST := 0;
    OPEN ITEMS_CURSOR(IN_ID);
    LOOP
    FETCH ITEMS_CURSOR INTO CITEM_ID, CREST_ID, CQNTY;
        EXIT WHEN ITEMS_CURSOR%NOTFOUND; 
        SELECT PRICE*CQNTY INTO ITEM_PRICE
        FROM DD_ITEMS WHERE RESTAURANT_ID = CREST_ID AND ITEM_ID = CITEM_ID;
        TOTAL_ITEM_COST := TOTAL_ITEM_COST + ITEM_PRICE;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('Total item cost : ' || TOTAL_ITEM_COST ); 
    

    VDELIVERY_CHARGE := TOTAL_ITEM_COST * 0.15; 
    SELECT GREATEST(VDELIVERY_CHARGE, 30) INTO VDELIVERY_CHARGE FROM DUAL;
    DBMS_OUTPUT.PUT_LINE('delivery charge : ' || VDELIVERY_CHARGE ); 

    
    VDRIVER_SHARE := 0.05*TOTAL_ITEM_COST;
    VTAX_AMOUNT := TOTAL_ITEM_COST * 0.1;
    
    -- set delivery charge =0, if user has 
    SELECT CASE WHEN DOORDASH_PASS = 'Y' THEN 1 ELSE 0 END INTO VDOORDASH_PASS FROM DD_CUSTOMER WHERE CUSTOMER_ID = CUST_ID;
    IF  VDOORDASH_PASS = 1 THEN 
        VDELIVERY_CHARGE :=0;
    END IF;
    VTOTAL_COST := TOTAL_ITEM_COST + VDELIVERY_CHARGE + VDRIVER_TIP + VTAX_AMOUNT;

    DBMS_OUTPUT.PUT_LINE('total charge : ' || vtotal_cost || ' delivery_charge : ' || vdelivery_charge || ' driver_tip : ' || vdriver_tip  || ' tax_amount ' || vtax_amount );
    
    UPDATE DD_ORDERS 
    SET DELIVERY_CHARGE = VDELIVERY_CHARGE
        , TAX_AMOUNT = VTAX_AMOUNT
        , DRIVER_SHARE = VDRIVER_SHARE
        , TOTAL_COST = VTOTAL_COST
    WHERE ORDER_ID = IN_ID;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Updated successfully');
    

END UPDATE_PRICES;
/



